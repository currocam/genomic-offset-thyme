// Adapted from https://github.com/bcm-uga/geneticgap

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	defineConstant("K", 11);   // carrying capacity
	defineConstant("S", 0.8);   // spatial competition distanced
	defineConstant("sigma_K1", 0.5); // fitness variance trait1
	defineConstant("sigma_K2", 2); // fitness variance trait2
	
	
	// Neutral mutations
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	if (exists("slimgui")) {
		defineConstant("nQTLs1", max(asInteger(round(runif(1) * 100)), 10));
		defineConstant("nQTLs2", max(asInteger(round(runif(1) * 100)), 10));
	}
	
	// Adjust the strength of the QTL accordingly
	initializeMutationType("m2", 0.5, "f", 0.5 / asInteger(nQTLs1));   // QTL
	m2.convertToSubstitution = F;
	// Adjust the strength of the QTL accordingly
	initializeMutationType("m3", 0.5, "f", 0.5 / asInteger(nQTLs2));   // QTL
	m3.convertToSubstitution = F;
	
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 110000);
	initializeMutationRate(3e-6);
	initializeRecombinationRate(1e-2);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.5);
}

// We want to handle the fitness effect manually
mutationEffect(m2){return 1.0;}
mutationEffect(m3){return 1.0;}

1 early() {
	
	sim.addSubpop("p1", 500);
	p1.setSpatialBounds(c(0.0, 0.0, 12.0, 12.0));
	
	// random initial positions
	p1.individuals.x = runif(500, 5, 7);
	p1.individuals.y = runif(500, 5, 7);
	
	//Define causal env predictor of trait one
	mapVar1 = c();
	
	for (i in seq(1,12))
	{
		line = c();
		for (j in seq(1,12)){
			line = c(line, runif(1, (1/12)*(j-1), (1/12)*j));
		}
		mapVar1 = rbind(mapVar1, line);
	}
	
	//Define causal env predictor of trait two
	mapVar2 = c();
	
	for (i in seq(1,12))
	{
		line = c();
		for (j in seq(1,12)){
			line = c(line, runif(1, (1/12)*(i-1), (1/12)*i));
		}
		mapVar2 = rbind(mapVar2, line);
	}
	
	
	// MAP CREATION and MAP VARIATION
	// It doesn't matter in this simulation!
	// map1 contains the *current* causal env predictor of trait one
	defineConstant("var1", mapVar1);
	// We use it to colour (if interactive)
	p1.defineSpatialMap("map1", "xy", var1, interpolate=F,valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
	
	// map2 contains the *future* causal env predictor of trait one
	mapVar1Final = mapVar1 + runif(144, -0.3, 0.3);
	Var1Variation = mapVar1Final - mapVar1;
	defineConstant("var1final", mapVar1Final);
	p1.defineSpatialMap("map2", "xy", var1final, interpolate=F);
	
	// map3 contains the *current* causal env predictor of trait two
	defineConstant("var2", mapVar2);
	p1.defineSpatialMap("map3", "xy", var2, interpolate=F);
	
	// map4 contains the *future* causal env predictor of trait two
	mapVar2Final = mapVar2 + runif(144, -0.3, 0.3);
	Var2Variation = mapVar2Final - mapVar2;
	defineConstant("var2final", mapVar2Final);
	p1.defineSpatialMap("map4", "xy", var2final, interpolate=F);
	
	// We define a frontier, such that everything out has a fitness of zero
	mapFrontiere = rep(0,12);
	for (i in seq(1,10))
	{
		mapFrontiere = rbind(mapFrontiere, c(0, rep(1,10), 0));
	}
	mapFrontiere = rbind(mapFrontiere, rep(0,12));
	
	defineConstant("varfrontiere", mapFrontiere);
	p1.defineSpatialMap("mapFrontiere", "xy", varfrontiere, interpolate=F);
	
	// Adding frontiere init
	mapFrontiereinit = c();
	for (i in seq(1,4))
	{
		mapFrontiereinit = rbind(mapFrontiereinit, rep(0,12));
	}
	
	for (i in seq(1,4))
	{
		mapFrontiereinit = rbind(mapFrontiereinit, c(rep(0,4), rep(1,4), rep(0,4)));
	}
	for (i in seq(1,4))
	{
		mapFrontiereinit = rbind(mapFrontiereinit, rep(0,12));
	}
	
	defineConstant("varfrontiereinit", mapFrontiereinit);
	p1.defineSpatialMap("mapFrontiereinit", "xy", varfrontiereinit, interpolate=F);

}

// Purely demographic phase shaping population structure
// NO SELECTION

1:20200 late()
{
	// move around a bit
	for (ind in p1.individuals)
	{
		newPos = ind.spatialPosition + runif(2, -0.3, 0.3);
		ind.setSpatialPosition(p1.pointPeriodic(newPos));
	}
	
	// then look for mates
	i2.evaluate(sim.subpopulations);
}

1:20200 reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 100);
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		if (mate.size()){
			mate_index = rdunif(1,1,mate.size());
			offspring = subpop.addCrossed(individual, mate[mate_index-1]);
		}
		else
			offspring = individual;
		
		// set offspring position
		pos = individual.spatialPosition + rnorm(2, 0, 0.3);
		offspring.setSpatialPosition(p1.pointPeriodic(pos));
	}
}


1:20000 early() {
	i1.evaluate(sim.subpopulations);
	
	// spatial competition provides density-dependent selection
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	competition = (competition + 1) / (PI * S^2);
	inds.fitnessScaling = K / competition;
	
	location = inds.spatialPosition[rep(c(T,T), inds.size())];
	frontscale = p1.spatialMapValue("mapFrontiereinit", location);
	inds.fitnessScaling = inds.fitnessScaling * frontscale;

}

20000:20200 early() {
	i1.evaluate(sim.subpopulations);
	
	// spatial competition provides density-dependent selection
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	competition = (competition + 1) / (PI * S^2);
	inds.fitnessScaling = K / competition;
	
	location = inds.spatialPosition[rep(c(T,T), inds.size())];
	frontscale = p1.spatialMapValue("mapFrontiere", location);
	inds.fitnessScaling = inds.fitnessScaling * frontscale;
}


// Local adaptation for both traits
// SELECTION PHASE 

20200:22000 late()
{
	// move around a bit
	for (ind in p1.individuals)
	{
		newPos = ind.spatialPosition + runif(2, -0.3, 0.3);
		ind.setSpatialPosition(p1.pointPeriodic(newPos));
	}
	
	// then look for mates
	i2.evaluate(sim.subpopulations);
}

20200:22000 reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 100);
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		if (mate.size()){
			mate_index = rdunif(1,1,mate.size());
			offspring = subpop.addCrossed(individual, mate[mate_index-1]);
		}
		else
			offspring = individual;
		
		// set offspring position
		pos = individual.spatialPosition + rnorm(2, 0, 0.3);
		offspring.setSpatialPosition(p1.pointPeriodic(pos));
	}
}

22000:25000 late()
{
	// move around a bit
	for (ind in p1.individuals)
	{
		newPos = ind.spatialPosition + runif(2, -0.1, 0.1);
		ind.setSpatialPosition(p1.pointPeriodic(newPos));
	}
	
	// then look for mates
	i2.evaluate(sim.subpopulations);
}

22000:25000 reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 100);
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		if (mate.size()){
			mate_index = rdunif(1,1,mate.size());
			offspring = subpop.addCrossed(individual, mate[mate_index-1]);
		}
		else
			offspring = individual;
		
		// set offspring position
		pos = individual.spatialPosition + rnorm(2, 0, 0.05);
		offspring.setSpatialPosition(p1.pointPeriodic(pos));
	}
}

// We manually *add* mutations in some of the genomes
20200 early() {
	q1 = NULL;
	for (i in seq(1,asInteger(nQTLs1))){
		target1 = sample(p1.genomes, 300);
		pos = 400 * i;
		target1.addNewDrawnMutation(m2, pos);
		q1 = c(q1, pos);
	}
	// Q1 contains the positions of QTLs of trait 1
	defineConstant("Q1", q1);
	q2 = NULL;
	for (i in seq(1,asInteger(nQTLs2))){
		target1 = sample(p1.genomes, 300);
		pos = 50000+(400 * i);
		target1.addNewDrawnMutation(m3, pos);
		q2 = c(q2, pos);
	}
	// Q2 contains the positions of QTLs of trait 2
	defineConstant("Q2", q2);
}

20201:25001 early() {
	// Fitness effect of both traits
	inds = sim.subpopulations.individuals;
	phenotype_var1 = inds.sumOfMutationsOfType(m2);
	phenotype_var2 = inds.sumOfMutationsOfType(m3);
	
	location = inds.spatialPosition[rep(c(T,T), inds.size())];
	optimum_var1 = p1.spatialMapValue("map1", location);
	optimum_var2 = p1.spatialMapValue("map3", location);
	
	distance = ((optimum_var1 - phenotype_var1)/sigma_K1)^2 + ((optimum_var2 - phenotype_var2)/sigma_K2)^2;
	inds.fitnessScaling = exp(-(1/2)*distance);
	inds.color = p1.spatialMapColor("map1", phenotype_var1);
	
	// Density regulation
	i1.evaluate(sim.subpopulations);
	competition = i1.totalOfNeighborStrengths(inds);
	competition = (competition + 1) / (PI * S^2);
	inds.fitnessScaling = inds.fitnessScaling * (K / competition);
	
	// Only allow individuals within bounds
	location = inds.spatialPosition[rep(c(T,T), inds.size())];
	frontscale = p1.spatialMapValue("mapFrontiere", location);
	inds.fitnessScaling = inds.fitnessScaling * frontscale;


}

// Outout data
25000 late() {
	if (!exists("slimgui")) {
		inds = sim.subpopulations.sampleIndividuals(100);
		inds.genomes.outputVCF(filePath=outvcf);
		writeFile(outfile, "#QTLs trait 1");
		writeFile(outfile, paste(Q1+1), append=T);
		writeFile(outfile, "#QTLs trait 2", append=T);
		writeFile(outfile, paste(Q2+1), append=T);
		
		writeFile(outfile, "#Phenotype 1", append=T);
		phenotype1 = inds.sumOfMutationsOfType(m2);
		writeFile(outfile, paste(phenotype1), append=T);
		writeFile(outfile, "#Phenotype 2", append=T);
		phenotype2 = inds.sumOfMutationsOfType(m3);
		writeFile(outfile, paste(phenotype2), append=T);
		
		writeFile(outfile, "#Location X", append=T);
		writeFile(outfile, paste(inds.x), append=T);
		writeFile(outfile, "#Location Y", append=T);
		writeFile(outfile, paste(inds.y), append=T);
		
		writeFile(outfile, "#Current env 1", append=T);
		location = inds.spatialPosition[rep(c(T,T), inds.size())];
		current_env1 = p1.spatialMapValue("map1", location);
		writeFile(outfile, paste(current_env1), append=T);
		writeFile(outfile, "#Current env 2", append=T);
		current_env2 = p1.spatialMapValue("map3", location);
		writeFile(outfile, paste(current_env2), append=T);
				
		
		writeFile(outfile, "#Current fitness", append=T);
		distance = ((current_env1 - phenotype1)/sigma_K1)^2 + ((current_env2 - phenotype2)/sigma_K2)^2;
		current_fit= exp(-(1/2)*distance);
		writeFile(outfile, paste(current_fit), append=T);
		
		writeFile(outfile, "#Future env 1", append=T);
		future_env1 = p1.spatialMapValue("map2", location);
		writeFile(outfile, paste(future_env1), append=T);
		writeFile(outfile, "#Future env 2", append=T);
		future_env2= p1.spatialMapValue("map4", location);
		writeFile(outfile, paste(future_env2), append=T);
		
		writeFile(outfile, "#Future fitness", append=T);
		distance = ((future_env1 - phenotype1)/sigma_K1)^2 + ((future_env2 - phenotype2)/sigma_K2)^2;
		future_fit= exp(-(1/2)*distance);
		writeFile(outfile, paste(future_fit), append=T);
	}
	if (exists("slimgui")) {
		inds = sim.subpopulations.sampleIndividuals(5);
		catn("#QTLs trait 1");
		catn(paste(Q1+1));
		catn("#QTLs trait 2");
		catn(paste(Q2+1));
		catn("#Phenotype 1");
		phenotype1 = inds.sumOfMutationsOfType(m2);
		catn(paste(phenotype1));
		catn("#Phenotype 2");
		phenotype2 = inds.sumOfMutationsOfType(m3);
		catn(paste(phenotype2));
		catn("#Location X");
		catn(paste(inds.x));
		catn("#Location Y");
		catn(paste(inds.y));
		catn("#Current env 1");
		location = inds.spatialPosition[rep(c(T,T), inds.size())];
		current_env1 = p1.spatialMapValue("map1", location);
		catn(paste(current_env1));
		catn("#Current env 2");
		current_env2 = p1.spatialMapValue("map3", location);
		catn(paste(current_env2));
		catn("#Current fitness");
		distance = ((current_env1 - phenotype1)/sigma_K1)^2 + ((current_env2 - phenotype2)/sigma_K2)^2;
		current_fit= exp(-(1/2)*distance);
		catn(paste(current_fit));
		catn("#Future env 1");
		future_env1 = p1.spatialMapValue("map2", location);
		catn(paste(future_env1));
		catn("#Future env 2");
		future_env2= p1.spatialMapValue("map4", location);
		catn(paste(future_env2));
		catn("#Future fitness");
		distance = ((future_env1 - phenotype1)/sigma_K1)^2 + ((future_env2 - phenotype2)/sigma_K2)^2;
		future_fit= exp(-(1/2)*distance);
		catn(paste(future_fit));
		catn("Simulation finished!");
	}
}